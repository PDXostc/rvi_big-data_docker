---

- name: create EC2 instance
  hosts: localhost
  connection: local
  vars_prompt:
    - name: ec2_region
      prompt: "EC2 region"
      default: eu-central-1
      private: no
    - name: ec2_instance_type
      prompt: "Instance type"
      default: c3.xlarge
      private: no
    - name: ec2_key
      prompt: "Key name"
      default: aws_frankfurt
      private: no
  vars:
    - ec2_group: rvi_demo
    - instance_count: 1
    - instance_name: "RVI Big Data"
  tasks:
    - name: create security group
      local_action:
        module: ec2_group
        name: "{{ ec2_group }}"
        description: "RVI Big Data demo"
        region: "{{ ec2_region }}"
        state: present
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 9092
            to_port: 9092
            cidr_ip: 87.138.108.187/32
          - proto: tcp
            from_port: 2181
            to_port: 2181
            cidr_ip: 87.138.108.187/32
          - proto: tcp
            from_port: 9042
            to_port: 9042
            cidr_ip: 87.138.108.187/32
          - proto: tcp
            from_port: 9160
            to_port: 9160
            cidr_ip: 87.138.108.187/32
          - proto: tcp
            from_port: 9000
            to_port: 9000
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 10555
            to_port: 10555
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
    - name: create ec2 instance
      local_action:
        module: ec2
        key_name: "{{ ec2_key }}"
        group: "{{ ec2_group }}"
        instance_type: "{{ ec2_instance_type }}"
        image: ami-8ec1f293
        region: "{{ ec2_region }}"
        wait: yes
        exact_count: "{{ instance_count }}"
        user_data: "{{ lookup('template', 'user-data.j2') }}"
        count_tag:
          Name: "{{ instance_name }}"
        instance_tags:
          Name: "{{ instance_name }}"
          type: coreos
        volumes:
          - device_name: /dev/xvdf
            device_type: gp2
            volume_size: 20
            delete_on_termination: true
      register: ec2

    - name: Add the instance to host group
      local_action: add_host hostname={{ item.public_ip }} groupname="rvi"
      with_items: ec2.tagged_instances

    - name: Wait for SSH
      local_action: wait_for host={{ item.public_ip }} port=22 delay=5 timeout=320 state=started
      with_items: ec2.tagged_instances

- name: bootstrap
  hosts: rvi
  vars:
    ansible_ssh_user: core
    ansible_python_interpreter: "PATH=/home/core/bin:$PATH python"
  gather_facts: False
  roles:
    - defunctzombie.coreos-bootstrap
  tasks:
    - name: install docker-py
      pip: name=docker-py version="0.6.0"

- name: launch containers
  hosts: rvi
  vars_prompt:
    - name: registry_user
      prompt: "Docker Hub user name"
      private: no
      default: koshelev
    - name: registry_password
      prompt: "Docker Hub password"
      private: yes
    - name: registry_email
      prompt: "Docker Hub email"
      default: vr.koshelev@gmail.com
      private: no
  vars:
    ansible_ssh_user: core
    ansible_python_interpreter: "PATH=/home/core/bin:$PATH python"
  tasks:
    # external software
    - include: tasks/launch-zookeper.yml
    - include: tasks/launch-kafka.yml
    - include: tasks/launch-cassandra.yml

    # try to log in to docker.io
    - include: tasks/docker-login.yml

    # just update/pull the data feeds container from docker.io
    - include: tasks/pull-data-feeds.yml

    # try to import historical data
    - include: tasks/import-historical-data.yml

    # launch the api and ui
    - include: tasks/launch-api.yml
    - include: tasks/pull-ui.yml

    - name: launch ui
      docker:
        image: "advancedtelematic/rvi_demo_ui:0.5.3"
        name: ui
        expose: 10555
        ports:
          - 10555:10555
        env:
          TRACES_URI: ws://{{ inventory_hostname }}:9000/ws
          API_URI: http://{{ inventory_hostname }}:9000/
        state: running

    # finally start the data feeds container
    - include: tasks/run-data-feeds.yml
